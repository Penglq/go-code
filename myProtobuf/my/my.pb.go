// Code generated by protoc-gen-go. DO NOT EDIT.
// source: my.proto

/*
Package my is a generated protocol buffer package.

It is generated from these files:
	my.proto

It has these top-level messages:
	TestString
	TestInt
	TestSInt
	TestFixed32
	Test
*/
package my

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestString struct {
	S string `protobuf:"bytes,2,opt,name=s" json:"s,omitempty"`
}

func (m *TestString) Reset()                    { *m = TestString{} }
func (m *TestString) String() string            { return proto.CompactTextString(m) }
func (*TestString) ProtoMessage()               {}
func (*TestString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestString) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type TestInt struct {
	S int32 `protobuf:"varint,2,opt,name=s" json:"s,omitempty"`
}

func (m *TestInt) Reset()                    { *m = TestInt{} }
func (m *TestInt) String() string            { return proto.CompactTextString(m) }
func (*TestInt) ProtoMessage()               {}
func (*TestInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestInt) GetS() int32 {
	if m != nil {
		return m.S
	}
	return 0
}

type TestSInt struct {
	S int32 `protobuf:"zigzag32,1,opt,name=s" json:"s,omitempty"`
}

func (m *TestSInt) Reset()                    { *m = TestSInt{} }
func (m *TestSInt) String() string            { return proto.CompactTextString(m) }
func (*TestSInt) ProtoMessage()               {}
func (*TestSInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TestSInt) GetS() int32 {
	if m != nil {
		return m.S
	}
	return 0
}

type TestFixed32 struct {
	S uint32 `protobuf:"fixed32,1,opt,name=s" json:"s,omitempty"`
}

func (m *TestFixed32) Reset()                    { *m = TestFixed32{} }
func (m *TestFixed32) String() string            { return proto.CompactTextString(m) }
func (*TestFixed32) ProtoMessage()               {}
func (*TestFixed32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TestFixed32) GetS() uint32 {
	if m != nil {
		return m.S
	}
	return 0
}

type Test struct {
	Label         string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Type          int32   `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Reps          []int64 `protobuf:"varint,3,rep,packed,name=reps" json:"reps,omitempty"`
	RequiredField string  `protobuf:"bytes,5,opt,name=requiredField" json:"requiredField,omitempty"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Test) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Test) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Test) GetReps() []int64 {
	if m != nil {
		return m.Reps
	}
	return nil
}

func (m *Test) GetRequiredField() string {
	if m != nil {
		return m.RequiredField
	}
	return ""
}

func init() {
	proto.RegisterType((*TestString)(nil), "my.TestString")
	proto.RegisterType((*TestInt)(nil), "my.TestInt")
	proto.RegisterType((*TestSInt)(nil), "my.TestSInt")
	proto.RegisterType((*TestFixed32)(nil), "my.TestFixed32")
	proto.RegisterType((*Test)(nil), "my.Test")
}

func init() { proto.RegisterFile("my.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcf, 0x4b, 0x0a, 0xc2, 0x30,
	0x10, 0x06, 0x60, 0xd2, 0x87, 0x6d, 0x47, 0x5d, 0x18, 0x04, 0x83, 0x6e, 0x4a, 0x71, 0xd1, 0x95,
	0x0b, 0x7b, 0x87, 0x82, 0xdb, 0xea, 0x05, 0x2c, 0x1d, 0x24, 0xd2, 0x97, 0x49, 0x04, 0x73, 0x7b,
	0x99, 0x28, 0x16, 0x77, 0x7f, 0xfe, 0x8f, 0xcc, 0x30, 0x10, 0x77, 0xf6, 0x30, 0xaa, 0xc1, 0x0c,
	0xdc, 0xeb, 0x6c, 0xb6, 0x05, 0xb8, 0xa0, 0x36, 0x67, 0xa3, 0x64, 0x7f, 0xe3, 0x0b, 0x60, 0x5a,
	0x78, 0x29, 0xcb, 0x93, 0x8a, 0xe9, 0x6c, 0x03, 0x11, 0xd9, 0xa9, 0x37, 0x13, 0x84, 0x04, 0x02,
	0x62, 0xf7, 0xe9, 0x27, 0x2c, 0x65, 0xf9, 0x8a, 0x64, 0x07, 0x73, 0x92, 0x52, 0xbe, 0xb0, 0x29,
	0x8e, 0x13, 0x46, 0x84, 0x77, 0x08, 0x08, 0xf9, 0x1a, 0xc2, 0xf6, 0x5a, 0x63, 0xeb, 0x24, 0xa9,
	0x3e, 0x0f, 0xce, 0x21, 0x30, 0x76, 0xc4, 0xef, 0x16, 0x97, 0xa9, 0x53, 0x38, 0x6a, 0xe1, 0xa7,
	0x7e, 0xee, 0x57, 0x2e, 0xf3, 0x3d, 0x2c, 0x15, 0x3e, 0x9e, 0x52, 0x61, 0x53, 0x4a, 0x6c, 0x1b,
	0x11, 0xba, 0x29, 0xff, 0x65, 0x3d, 0x73, 0x27, 0x16, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x07, 0xdd, 0xfb, 0xee, 0x00, 0x00, 0x00,
}
